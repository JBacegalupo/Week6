######################################
#### Programming Portfolio week 6 ####
######################################


#### challenge 1 ####

def ConvertToBinary(number):
    return bin(number)
if __name__ == "__main__":
    number = input("Please enter a positive integer: ")
    print(f"the binary representation of {number} is {str(ConvertToBinary(int(number)))[2:]} ")

#### challenge 2 ####


def Factors(number):
    factorlist = []
    for x in range(1, number + 1):
        for y in range(1, number + 1):
            if x * y == number:
                factorlist.append((str(x) + "*" + str(y)))
    return list(dict.fromkeys(factorlist))

if __name__ == "__main__":
    number = input("Please enter an integer: ")
    factorlist = Factors(int(number))
    factorlist = factorlist[:len(factorlist)//2]
    for factors in factorlist:
        print(factors)
####################

#### challenge 3 ####

def prime(number):
    Primenum = True
    for factor in range(number -1, 1, -1):
        if number % factor ==0:
            Primenum = False
            return False

    if Primenum:
        return True




if __name__ == "__main__":
    number = input("Please enter an integer: ")
    if prime(int(number)):
        print(f"the number {number} is prime")
    else:
        print(f"the number {number} is not prime")
######################

#### challenge 4 ####

def obfusication(input):
    return input.replace(" ","")[::-1]



if __name__ == "__main__":
    input = input("Please enter a string ")
    print(f"the text {input} has been obfusicated to {obfusication(input)}")

#### Challenge 5 ####
import random
import string


def obfusication(input):
    Strlistcounter = 0
    interval = random.randint(2,20)
    string_list = list(input)
    Encrypt_list = []
    while len(Encrypt_list) < (interval * len(input) + len(input)):
        Encrypt_list.append(string_list[Strlistcounter])
        Strlistcounter +=1
        if Strlistcounter == len(input):
            return "".join(Encrypt_list)
        else:
            for x in range(0,interval):
                if Encrypt_list[-1:][0] == " ":
                    pass
                else:
                    Encrypt_list.append(random.choice(string.ascii_lowercase))





if __name__ == "__main__":
    input = input("Please enter a string ")
    obfusicatedinput = (obfusication(input))
    print(obfusicatedinput)

#####################

#### challenge 6 ####
import random
import string


def obfusication(input):
    Strlistcounter = 0
    interval = random.randint(2,20)
    string_list = list(input)
    Encrypt_list = []
    while len(Encrypt_list) < (interval * len(input) + len(input)):
        Encrypt_list.append(string_list[Strlistcounter])
        Strlistcounter +=1
        if Strlistcounter == len(input):
            return "".join(Encrypt_list) , interval
        else:
            for x in range(0,interval):
                if Encrypt_list[-1:][0] == " ":
                    pass
                else:
                    Encrypt_list.append(random.choice(string.ascii_lowercase))

def deobfutication(currentword, interval):
    ### current word , interval
    currentposition = 0
    finalwordlist = list()
    while currentposition < len(currentword):
        if not currentposition > len(currentword):
            finalwordlist.append(currentword[currentposition])
            currentposition += interval + 1
    return "".join(finalwordlist)





if __name__ == "__main__":
    finalsetencelist = list()
    input = input("Please enter a string ")
    obfusicatedinput = (obfusication(input))
    print(obfusicatedinput[0])
    obfusicatedlist = obfusicatedinput[0].split(" ")
    if len(obfusicatedlist) == 1:
        finalsetencelist.append(deobfutication(obfusicatedinput[0], obfusicatedinput[1]))

    else:
        for wordindex in range(0, len(obfusicatedlist)):
           finalsetencelist.append(deobfutication(obfusicatedlist[wordindex], obfusicatedinput[1]))
    print(" ".join(finalsetencelist))
